
1) stworzenie nowego web API
2) uruchomienie - aby ominąc zabezpieczenie ssl w chrome wpisujemy w przeglądarce chrome://flags/#allow-insecure-localhost i ustawiamy na enabled
3) Testowanie API:
    - w swaggerze
	- w curlu - mini program do testowania api w konsoli
	- w postmanie - rozbudowany program do testowania api
	- w przeglądarce
	- w visual studio używając plików .http

w curl:
w konsoli wpisujemy:
	curl -X "GET" "https://localhost:7061/WeatherForecast" -H "accept: text/plain"

	w windows należy zamiast ' używać "

	parametr -k pozwala ominąć zabezpieczenie ssl
w powershellu:
	Invoke-WebRequest -Method GET -Uri "https://localhost:7061/WeatherForecast" -Headers @{"accept" = "text/plain"}


4) Omówienie czasowników HTTP i zasady działania kontrolerów na przykładzie WeatherForecastController

5) Rozbudujemy API o nowy kontroler - ProductController
 - dodanie nowego kontrolera
 - dodanie nowego modelu (Product) w projekcie wspólnym (shared)
 - dodanie ServiceReponse w projekcie wspólnym (shared)
 - dodanie nowego serwisu (ProductService) w projekcie API
 - dodanie DataSeeder w nowym projekcie API
 - wdrożenie mechanizmu DI (dependency injection) poprzez stworzenie Intrefejsu a potem konfiguracje w Program.cs

 6) Rozbudowa aplikacji klienckiej tak aby korzystała z nowego API
	- dodanie serwisu ProductService
	- refaktoryzacja App.xaml.cs:
		- Konfiguracja HttpClient z poziomu app.xaml.cs
		- Dostep do AppSetings z poziomu app.xaml.cs
	- Dodanie view modelu ProductViewModel
	- Dodanie widoku ShopProductsView
	- Otworzenie widoku ShopProductsView z poziomu MainViewModel

7) Uruchomienie jednocześnie API oraz klienta 
 - api uruchamiamy z konsoli (dotnet run). Pamietać, że w launchSettings dotnet run uruchamia pierwszy projekt w kolejności
    poleceniem dotent run --launch-profile "nazwaProfilu" możemy uruchomić inny profil 

8) Poprawnie w AccuWeatherService dostepu do DefaultLanguage z poziomu AppSettings
9) Zapisalismy z postamana kolekcje requestów do pliku .json
 - postman potrafi sam wygenerować kod w c# na podstawie kolekcji requestów
